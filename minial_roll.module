<?php

/**
 * @file
 * Primary module hooks for Minial Roll module.
 */

use Drupal\Core\Render\Element;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function minial_roll_theme(): array {
  return [
    'minial_roll_game' => ['render element' => 'elements'],
    'minial_roll_game_element' => ['render element' => 'elements'],
    'minial_roll_faction' => ['render element' => 'elements'],
    'minial_roll_armour' => ['render element' => 'elements'],
    'minial_roll_character' => ['render element' => 'elements'],
    'minial_roll_weapon' => ['render element' => 'elements'],
  ];
}

/**
 * List machine ids of all entities defined by this module.
 *
 * @return string[]
 *   Array of entity machine ids.
 */
function _list_defined_types(): array {
  return [
    'minial_roll_game',
    'minial_roll_element',
    'minial_roll_faction',
    'minial_roll_armour',
    'minial_roll_character',
    'minial_roll_weapon',
  ];
}

/**
 * Prepares variables for game templates.
 *
 * Default template: minial-roll-game.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the game information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_minial_roll_game(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function minial_roll_user_cancel($edit, UserInterface $account, $method): void {
  $types = _list_defined_types();

  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish.
      foreach ($types as $type) {
        $storage = \Drupal::entityTypeManager()->getStorage($type);
        $minial_roll_game_ids = $storage->getQuery()
          ->condition('uid', $account->id())
          ->condition('status', 1)
          ->accessCheck(FALSE)
          ->execute();
        foreach ($storage->loadMultiple($minial_roll_game_ids) as $minial_roll_game) {
          $minial_roll_game->set('status', FALSE)->save();
        }
      }
      break;

    case 'user_cancel_reassign':
      // Anonymize.
      foreach ($types as $type) {
        $storage = \Drupal::entityTypeManager()->getStorage('minial_roll_game');
        $minial_roll_game_ids = $storage->getQuery()
          ->condition('uid', $account->id())
          ->accessCheck(FALSE)
          ->execute();
        foreach ($storage->loadMultiple($minial_roll_game_ids) as $minial_roll_game) {
          $minial_roll_game->setOwnerId(0)->save();
        }
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function minial_roll_user_predelete(UserInterface $account): void {
  $types = _list_defined_types();
  // Delete games that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('minial_roll_game');
  $minial_roll_game_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($minial_roll_game_ids)
  );
  // Delete old revisions.
  $minial_roll_game_ids = $storage->getQuery()
    ->allRevisions()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  foreach (array_keys($minial_roll_game_ids) as $revision_id) {
    $storage->deleteRevision($revision_id);
  }
  // Delete gameelements that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('minial_roll_game_element');
  $minial_roll_game_element_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($minial_roll_game_element_ids)
  );
  // Delete old revisions.
  $minial_roll_game_element_ids = $storage->getQuery()
    ->allRevisions()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  foreach (array_keys($minial_roll_game_element_ids) as $revision_id) {
    $storage->deleteRevision($revision_id);
  }
}

/**
 * Prepares variables for gameelement templates.
 *
 * Default template: minial-roll-game-element.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the gameelement information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_minial_roll_game_element(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for faction templates.
 *
 * Default template: minial-roll-faction.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the faction information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_minial_roll_faction(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for armour templates.
 *
 * Default template: minial-roll-armour.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the armour information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_minial_roll_armour(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for character templates.
 *
 * Default template: minial-roll-character.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the character information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_minial_roll_character(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for weapon templates.
 *
 * Default template: minial-roll-weapon.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the weapon information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_minial_roll_weapon(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}
